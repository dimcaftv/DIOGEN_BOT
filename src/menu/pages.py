from datetime import date

from database import models
from menu.actions import (AddHomeworkAction, CopyPrevTimetableAction, CreateGroupAction, CreateInviteAction,
                          CreateTimetableAction, DeleteGroupAction, JoinGroupAction, KickUserAction, TransferAction,
                          ViewHomeworkAction, ViewRecentHomeworkAction)
from menu.menu import AbsMenuPage, KeyboardLayout, MenuItem
from utils import states
from utils.calendar import Week


class MainPage(AbsMenuPage):
    state = states.BotPagesStates.MAIN
    urlpath = 'main'

    def get_items(self) -> list[MenuItem]:
        return KeyboardLayout(
                MenuItem('–≥—Ä—É–ø–ø—ã', TransferAction('grouplist'))
        )

    def get_page_text(self) -> str:
        return f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'


class GroupListPage(AbsMenuPage):
    state = states.BotPagesStates.GROUPLIST
    urlpath = 'grouplist'

    def get_items(self) -> list[MenuItem]:
        self.groups = models.UserModel.get(self.tg_user.id).groups

        return KeyboardLayout(
                (MenuItem(g.name, TransferAction('group', {'group': g.id}))
                 for g in self.groups),
                (
                    MenuItem('üíæ —Å–æ–∑–¥–∞—Ç—å', CreateGroupAction()),
                    MenuItem('üîç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', JoinGroupAction())
                ),
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥', TransferAction('main'))
        )

    def get_page_text(self) -> str:
        return f'–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n' + '\n'.join(g.name for g in self.groups)


class GroupPage(AbsMenuPage):
    state = states.BotPagesStates.GROUP
    urlpath = 'group'

    def get_items(self) -> list[MenuItem]:
        self.group = models.GroupModel.get(self.query_data['group'])
        is_admin = self.group.is_group_admin(self.tg_user.id)
        group_id = self.group.id

        return KeyboardLayout(
                (
                    MenuItem('üìÜ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', TransferAction('timetable', {'group': group_id})),
                    MenuItem('üöπ —É—á–∞—Å—Ç–Ω–∏–∫–∏', TransferAction('users_list', {'group': group_id}))
                ),
                MenuItem('üí• –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è-–∑–∞–≤—Ç—Ä–∞ üí•', ViewRecentHomeworkAction(group_id)),
                (
                    MenuItem('üíæ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', CreateInviteAction(group_id), True),
                    MenuItem('üéü –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', TransferAction('active_invites', {'group': group_id}), True),
                ),
                MenuItem('‚ùå —É–¥–∞–ª–∏—Ç—å', DeleteGroupAction(group_id), True),
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥', TransferAction('grouplist')),
                is_admin=is_admin
        )

    def get_page_text(self) -> str:
        return f'–ì—Ä—É–ø–ø–∞ {self.group.name}'


class TimetablePage(AbsMenuPage):
    state = states.BotPagesStates.TIMETABLE
    urlpath = 'timetable'

    def get_items(self) -> list[MenuItem]:
        self.group = models.GroupModel.get(self.query_data['group'])
        self.week = Week.from_str(self.query_data['week']) if 'week' in self.query_data else Week.today()

        is_admin = self.group.is_group_admin(self.tg_user.id)
        group_id = self.group.id

        return KeyboardLayout(
                (
                    MenuItem('‚óÄ', TransferAction('timetable', {'group': group_id, 'week': str(self.week.prev())})),
                    MenuItem('‚ñ∂', TransferAction('timetable', {'group': group_id, 'week': str(self.week.next())}))
                ),
                (MenuItem(Week.standart_day_format(d),
                          TransferAction('daypage', {'group': group_id, 'date': str(d)}))
                 for d in self.week),
                MenuItem.empty(),
                MenuItem('üíæ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é', CreateTimetableAction(group_id, self.week), True),
                MenuItem('üîÑ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏', CopyPrevTimetableAction(group_id, self.week), True),
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥', TransferAction('group', {'group': group_id})),
                is_admin=is_admin
        )

    def get_page_text(self) -> str:
        return f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {self.group.name}'


class DayPage(AbsMenuPage):
    state = states.BotPagesStates.DAY
    urlpath = 'daypage'

    def get_items(self) -> list[MenuItem]:
        self.group = models.GroupModel.get(self.query_data['group'])
        self.date = date.fromisoformat(self.query_data['date'])

        lessons = models.LessonModel.select(models.LessonModel.date == self.date,
                                            models.LessonModel.group_id == self.group.id).all()

        return KeyboardLayout(
                (MenuItem(i.name + ' ‚úÖ' * bool(i.solutions),
                          TransferAction('lesson', {'group': self.group.id, 'lesson_id': i.id}))
                 for i in lessons),
                MenuItem.empty(),
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥',
                         TransferAction('timetable',
                                        {'group': self.group.id, 'week': str(Week.from_day(self.date))}))
        )

    def get_page_text(self) -> str:
        return f'–£—Ä–æ–∫–∏ –Ω–∞ {Week.standart_day_format(self.date)}:'


class LessonPage(AbsMenuPage):
    state = states.BotPagesStates.LESSON
    urlpath = 'lesson'

    def get_items(self) -> list[MenuItem]:
        self.lesson = models.LessonModel.get(self.query_data['lesson_id'])

        return KeyboardLayout(
                (
                    MenuItem('üîç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', ViewHomeworkAction(self.lesson.id)),
                    MenuItem('üíæ –¥–æ–±–∞–≤–∏—Ç—å', AddHomeworkAction(self.lesson.id))
                ),
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥',
                         TransferAction('daypage',
                                        {'group': self.lesson.group_id, 'date': str(self.lesson.date)}))
        )

    def get_page_text(self) -> str:
        return (f'"{self.lesson.name}" {Week.standart_day_format(self.lesson.date)}\n' +
                (f'–î–æ–ø. –∑–∞–¥–∞–Ω–∏–µ: {self.lesson.notes}' if self.lesson.notes else ''))


class UsersListPage(AbsMenuPage):
    state = states.BotPagesStates.USERSLIST
    urlpath = 'users_list'

    def get_items(self) -> list[MenuItem]:
        self.group = models.GroupModel.get(self.query_data['group'])
        is_admin = self.group.is_group_admin(self.tg_user.id)

        return KeyboardLayout(
                MenuItem('‚ò† –∫–∏–∫–Ω—É—Ç—å', KickUserAction(self.group.id), True),
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥', TransferAction('group', {'group': self.group.id})),
                is_admin=is_admin
        )

    def get_page_text(self) -> str:
        return (f'–£—á–∞—Å—Ç–Ω–∏–∫–∏ {self.group.name}:\n' +
                ', '.join((u.username or str(u.id)) for u in self.group.members))


class ActiveInvitesPage(AbsMenuPage):
    state = states.BotPagesStates.ACTIVE_INVITES
    urlpath = 'active_invites'

    def get_items(self) -> list[MenuItem]:
        self.group = models.GroupModel.get(self.query_data['group'])
        return KeyboardLayout(
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥', TransferAction('group', {'group': self.group.id}))
        )

    def get_page_text(self) -> str:
        return (f'–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {self.group.name}:\n' +
                '\n'.join(f'{i.link} - –û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {i.remain_uses}'
                          for i in self.group.invites))
