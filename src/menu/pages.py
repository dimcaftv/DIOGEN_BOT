from datetime import date

from database import models
from messages import messages
from utils.calendar import Week
from .actions.actions import (CopyPrevTimetableAction, FlipNotifyAction, TransferAction,
                              ViewRecentHomeworkAction)
from .actions.ask_actions import (ChangeGroupAdminAction, ChangeNotifyTemplateAction,
                                  CreateGroupAction, CreateInviteAction,
                                  CreateTimetableAction,
                                  DeleteGroupAction, JoinGroupAction,
                                  KickUserAction, RequestAnswerAction, ViewHomeworkAction)
from .menu import AbsMenuPage, KeyboardLayout, MenuItem


class MainPage(AbsMenuPage):
    def get_items(self) -> KeyboardLayout:
        return KeyboardLayout(
                MenuItem('–≥—Ä—É–ø–ø—ã', TransferAction('grouplist'))
        )

    def get_page_text(self) -> str:
        return f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'


class GroupListPage(AbsMenuPage):
    async def post_init(self):
        self.groups = (await models.UserModel.get(self.user_id)).groups

    def get_items(self) -> KeyboardLayout:
        return KeyboardLayout(
                (MenuItem(g.name, TransferAction('group', {'group': g.id}))
                 for g in self.groups),
                (
                    MenuItem('üíæ —Å–æ–∑–¥–∞—Ç—å', CreateGroupAction()),
                    MenuItem('üîç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', JoinGroupAction())
                ),
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥', TransferAction('main'))
        )

    def get_page_text(self) -> str:
        return f'–¢–≤–æ–∏ –≥—Ä—É–ø–ø—ã:\n' + '\n'.join(g.name for g in self.groups)


class GroupPage(AbsMenuPage):
    async def post_init(self):
        self.group = await models.GroupModel.get(self.query_data['group'])

    def get_items(self) -> KeyboardLayout:
        is_admin = self.group.is_group_admin(self.user_id)
        group_id = self.group.id

        return KeyboardLayout(
                (
                    MenuItem('üìÜ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', TransferAction('timetable', {'group': group_id})),
                    MenuItem('üöπ —É—á–∞—Å—Ç–Ω–∏–∫–∏', TransferAction('users_list', {'group': group_id}))
                ),
                MenuItem('üí• –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è-–∑–∞–≤—Ç—Ä–∞ üí•', ViewRecentHomeworkAction(group_id)),
                MenuItem('üé´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', TransferAction('group_invites', {'group': group_id}), True),
                MenuItem('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', TransferAction('group_settings', {'group': group_id}), True),
                MenuItem('‚ùå —É–¥–∞–ª–∏—Ç—å', DeleteGroupAction(group_id), True),
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥', TransferAction('grouplist')),
                is_admin=is_admin
        )

    def get_page_text(self) -> str:
        return f'–ì—Ä—É–ø–ø–∞ {self.group.name}'


class TimetablePage(AbsMenuPage):
    async def post_init(self):
        self.group = await models.GroupModel.get(self.query_data['group'])
        self.week = Week.from_str(self.query_data['week']) if 'week' in self.query_data else Week.today()

    def get_items(self) -> KeyboardLayout:
        is_admin = self.group.is_group_admin(self.user_id)
        group_id = self.group.id

        return KeyboardLayout(
                (
                    MenuItem('‚óÄ', TransferAction('timetable', {'group': group_id, 'week': str(self.week.prev())})),
                    MenuItem('‚ñ∂', TransferAction('timetable', {'group': group_id, 'week': str(self.week.next())}))
                ),
                (MenuItem(Week.standart_day_format(d),
                          TransferAction('daypage', {'group': group_id, 'date': str(d)}))
                 for d in self.week),
                MenuItem.empty(),
                MenuItem('üíæ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é', CreateTimetableAction(group_id, self.week), True),
                MenuItem('üîÑ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏', CopyPrevTimetableAction(group_id, self.week), True),
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥', TransferAction('group', {'group': group_id})),
                is_admin=is_admin
        )

    def get_page_text(self) -> str:
        return f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {self.group.name}'


class DayPage(AbsMenuPage):
    async def post_init(self):
        self.group = await models.GroupModel.get(self.query_data['group'])
        self.date = date.fromisoformat(self.query_data['date'])
        self.lessons = (await models.LessonModel.select(models.LessonModel.date == self.date,
                                                        models.LessonModel.group_id == self.group.id)).all()

    def get_items(self) -> KeyboardLayout:
        return KeyboardLayout(
                (MenuItem(i.name + ' ‚úÖ' * bool(i.solutions),
                          ViewHomeworkAction(i.id))
                 for i in self.lessons),
                MenuItem.empty(),
                MenuItem('ü•∫ –ü–æ–ø—Ä–æ—Å–∏—Ç—å –¥–∑', RequestAnswerAction(self.group.id, self.date), visible=bool(self.lessons)),
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥',
                         TransferAction('timetable',
                                        {'group': self.group.id, 'week': str(Week.from_day(self.date))}))
        )

    def get_page_text(self) -> str:
        return f'–£—Ä–æ–∫–∏ –Ω–∞ {Week.standart_day_format(self.date)}:'


class UsersListPage(AbsMenuPage):
    async def post_init(self):
        self.group = await models.GroupModel.get(self.query_data['group'])

    def get_items(self) -> KeyboardLayout:
        is_admin = self.group.is_group_admin(self.user_id)

        return KeyboardLayout(
                MenuItem('‚ò† –∫–∏–∫–Ω—É—Ç—å', KickUserAction(self.group.id), True),
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥', TransferAction('group', {'group': self.group.id})),
                is_admin=is_admin
        )

    def get_page_text(self) -> str:
        return (f'–£—á–∞—Å—Ç–Ω–∏–∫–∏ {self.group.name}, #{len(self.group.members)}:\n' +
                ', '.join((u.username or str(u.id)) for u in self.group.members))


class GroupSettingsPage(AbsMenuPage):
    async def post_init(self):
        self.settings = await models.GroupSettings.get(self.query_data['group'])

    def get_items(self) -> KeyboardLayout:
        return KeyboardLayout(
                MenuItem('–ü–µ—Ä–µ–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É', ChangeGroupAdminAction(self.settings.group_id)),
                MenuItem(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö {["‚ùå", "‚úÖ"][self.settings.new_answer_notify]}',
                         FlipNotifyAction(self.settings.group_id)),
                MenuItem('–ò–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', ChangeNotifyTemplateAction(self.settings.group_id)),
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥', TransferAction('group', {'group': self.settings.group_id}))
        )

    def get_page_text(self) -> str:
        return (f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã {self.settings.group.name}:\n'
                f'–î–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —á–∞—Ç: {["‚ùå", "‚úÖ"][bool(self.settings.general_group_chat_id)]}\n'
                f'–®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ç–≤–µ—Ç–µ:\n\n'
                f'"{self.settings.answer_notify_template or messages.default_notify_template}"')


class GroupInvitesPage(AbsMenuPage):
    async def post_init(self):
        self.group = await models.GroupModel.get(self.query_data['group'])

    def get_items(self) -> KeyboardLayout:
        group_id = self.group.id
        is_admin = self.group.is_group_admin(self.user_id)

        return KeyboardLayout(
                MenuItem('üíæ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', CreateInviteAction(group_id), True),
                MenuItem('üéü –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', TransferAction('active_invites', {'group': group_id}), True),
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥', TransferAction('group', {'group': self.group.id})),
                is_admin=is_admin
        )

    def get_page_text(self) -> str:
        return f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã {self.group.name}'


class ActiveInvitesPage(AbsMenuPage):
    async def post_init(self):
        self.group = await models.GroupModel.get(self.query_data['group'])

    def get_items(self) -> KeyboardLayout:
        return KeyboardLayout(
                MenuItem('‚óÄ –Ω–∞–∑–∞–¥', TransferAction('group_invites', {'group': self.group.id}))
        )

    def get_page_text(self) -> str:
        return (f'–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {self.group.name}:\n' +
                '\n'.join(f'{i.link} - –û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {i.remain_uses}'
                          for i in self.group.invites))
